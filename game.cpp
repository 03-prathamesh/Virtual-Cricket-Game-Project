#include"game.h"
using namespace std;



Game::Game() {   //constructor Definition


	playersPerTeam = 4;
	maxBalls = 6;
	totalPlayers = 11;


	players[0] = "MS Dhoni";
	players[1] = "Rohit Sharma";
	players[2] = "Ruturaj Gaikwad";
	players[3] = "Quinton De kock";
	players[4] = "Ravindra Jadeja";
	players[5] = "Hardik Pandya";
	players[6] = "Deepak Chahar";
	players[7] = "Jasprit Bumrah";
	players[8] = "Dwayne Bravo";
	players[9] = "Trent Boult";
	players[10] = "Kieron Pollard";


	isFirstInnings = false;

	//initialising name of teamA & teamB.
	teamA.name = "Chennai-Super-Kings";
	teamB.name = "Mumbai-Indians";
}


void Game::Welcome() {

	cout << "       ---------------------------------------------------------" << endl;
	cout << "       |===================== CRIC-In =========================|" << endl;
	cout << "       |                                                       |" << endl;
	cout << "       |           WELCOME To VIRTUAL-CRICKET-GAME!            |" << endl;
	cout << "       ---------------------------------------------------------" << endl;

	cout << endl << endl;

	cout << "       --------------------------------------------------------------------------" << endl;
	cout << "       |==================== INSTRUCTIONS =======================================|" << endl;
	cout << "       __________________________________________________________________________" << endl;
	cout << "       |                                                                         |" << endl;
	cout << "       | 1]Create 2 teams (Chennai-Super-Kings and Mumbai-Indians With 4 Players |     |" << endl;
	cout << "       | each) from a given pool of 11 PLAYERS.                                  |" << endl;
	cout << "       | 2] Lead the toss and Decide the choice of Play.                         |" << endl;
	cout << "       | 3] Each Innings will be of 6 Balls.                                     |" << endl;
	cout << "       |_________________________________________________________________________|" << endl;

}




void Game:: dispAllPlayers() {


	cout << endl;
	cout << "       ____________________________________________" << endl;
	cout << "       |========== POOL(LIST) OF PLAYERS =========|" << endl;
	cout << "       --------------------------------------------" << endl;
	cout << endl;

	for (int i = 0; i < totalPlayers; i++) {


		cout << "\t\t[" << i << "]  " << players[i] << endl;
	}

}

int Game:: IntegerInput() {
  
	int n;
	while (!(cin >> n)) {
 
		cin.clear();    //this function will clear error flags generated by invalid user  inputs
		cin.ignore(numeric_limits<streamsize>::max(), '\n');   //it clears Buffer Memory.

		cout << "Invalid Input!Please Try again with Valid Input.." << endl;

	}
	return n;

}


bool Game::validateSelectedPlayer(int iindex) {


	int p;
	vector<Player>players;    //vector name=players

	players = teamA.players;   
	p= players.size();        //dynamic size of vector


	for (int i = 0; i < p; i++) {

		if (players[i].index == iindex) {
			return false;
		}
	}


	players = teamB.players;
	p = players.size();

	for (int i = 0; i < p; i++) {

		if (players[i].index == iindex) {
			return false;
		}

		//return true;
	}


	return true;


}

void  Game::selectPlayers() {


	cout << endl;
	cout << "        _______________________________________________________" << endl;
	cout << "       |=====  Create teams Chennai-Super-Kings & Mumbai ======|" << endl;
	cout << "       |=========              Indians               ==========|" << endl;
	cout << "       |=========     From the Pool of 11  PLAYERS   ==========|" << endl;
	cout << "       ---------------------------------------------------------" << endl;

	for (int i = 0; i < playersPerTeam; i++) {


		cskselection:  //(goto label)
		//add players to chennai-super-kings
		cout << endl;
		cout << " Select Player " << i + 1 << " of team Chennai-Super-Kings-";
		


		//int n;
		//cin>>n;
        // int playersIndexCSK=n;
		int  playerIndexCSK = IntegerInput();   //user input (needs to be Index value of all the players)

		if (playerIndexCSK < 0 || playerIndexCSK>10) {

			cout << endl;
			cout << " Please Select from the Given Players!" << endl;

			goto cskselection;   //goto statement

		}
		else if (!validateSelectedPlayer(playerIndexCSK)) {

			cout<<endl;
			cout<<" Player has been already selected!Please select the other Player."<<endl;

           goto cskselection;    //goto  statement.

		}
		else {

			Player cskPlayer;   //creating the object of Player class
		   	cskPlayer.index = playerIndexCSK;
			cskPlayer.name = players[playerIndexCSK];
			      
			teamA.players.push_back(cskPlayer); 

		}

		//add players to team Mumabi-Indians

		miselection: //goto label
		cout << endl;
		cout << " Select Player " << i + 1 << " of team Mumbai-Indians-";

		int  playerIndexMI = IntegerInput();

		if (playerIndexMI < 0 || playerIndexMI>10) {

			cout << endl;
			cout << " Please Select from the Given Players!" << endl;


			goto miselection;   //goto statement....

		}
		else if (!validateSelectedPlayer(playerIndexMI)) {

			cout << endl;
			cout << " Player has been already selected!Please select the other Player." << endl;

			goto miselection;    //goto  statement.

		}
		else {

			Player MIPlayer;            
			MIPlayer.index = playerIndexMI;
			MIPlayer.name = players[playerIndexMI];

			teamB.players.push_back(MIPlayer);
		}

	}

}

void Game::showTeamPlayers() {

	vector<Player>teamAPlayers = teamA.players;   
	vector<Player>teamBPlayers = teamB.players;  

	cout << endl << endl << endl << endl << endl;
	cout << "      SELECTED PLAYERS FOR TEAM CHENNAI-SUPER-KINGS & MUMBAI INDIANS ARE AS FOLLOWS: " << endl << endl;
	cout << " --------------------------\t\t--------------------------" << endl;
	cout << " |**Chennai-Super-Kings**|\t\t|**** Mumbai-Indians ****|"<< endl;
	cout << " --------------------------\t\t--------------------------" << endl;


	for (int i = 0; i < playersPerTeam; i++) {

	     cout << " |  " << "[" << i << "] " << teamAPlayers[i].name<< "\t |" 
	         << "              "
		     << "|  " << "[" << i << "] " << teamBPlayers[i].name<< "\t |" << endl;


		 	}

	cout << "----------------------------\t\t---------------------------- " << endl << endl;


}

void Game::toss() {

	cout << endl;
	cout << "             ---------------------------------------------" << endl;
	cout << "             |==============  LET'S TOSS!  ==============|" << endl;
	cout << "             ---------------------------------------------" << endl << endl;

	cout << "\t Please ENTER to Continue...." << endl << endl;
	getchar();

	cout << "             -------------------------------------------------------" << endl;
	cout << "             ||**************   Tossing The Coin  *****************||" << endl;
	cout << "             --------------------------------------------------------" << endl << endl;


	cout << "\t Please ENTER to Continue...." << endl;
	getchar();


	srand(time(NULL));
	int randomValue = rand() % 2;

	switch (randomValue) {

	 case 0:
        
		 cout << "                      **********  CHENNAI-SUPER-KINGS WON THE TOSS.....!***********" << endl;
		 tossChoice(teamA);    //function call & passing actual arguments
		 break;
			 
	 case 1:

		 cout << "                       *********  MUMBAI-INDIANS WON THE TOSS.....!*************" << endl;
		 tossChoice(teamB);    //function call & passing arguments
		 break;

	}

}
void Game::tossChoice(Team tossWinnerTeam) {

	cout << endl << endl;
	cout << "         Enter 1 to BAT or 2 to BALL First.." << endl
	<< "                1.BAT" << endl
	<< "                2.BALL" << endl;

	int tossInput = IntegerInput();

	cin.ignore(numeric_limits<streamsize>::max(), '\n');

	switch (tossInput) {

	case 1:
		cout << endl;
		cout <<tossWinnerTeam.name << " WON THE TOSS & ELECTED TO BAT FIRST.." << endl << endl;

		if (tossWinnerTeam.name.compare("Chennai-Super-Kings")==0 ) {    //if csk is toss winner

			battingTeam = &teamA;
			bowlingTeam = &teamB;

		}
		else {    //else MI is a toss winner

			battingTeam = &teamB;
			bowlingTeam = &teamA;
		}
		break;


	case 2:

		cout << endl;
		cout << tossWinnerTeam.name << " WON THE TOSS & ELECTED TO BALL FIRST.." << endl << endl << endl;

		if (tossWinnerTeam.name.compare("Chennai-Super-Kings") == 0) {

			bowlingTeam = &teamA;
			battingTeam = &teamB;


		}
		else {
			bowlingTeam = &teamB;
			battingTeam = &teamA;
		}
		break;


	default:

		cout << endl;
		cout << "          !Invalid Input! Please Choose From 1 & 2 and Try Again. " << endl << endl;


		tossChoice(tossWinnerTeam);



	}




}
void Game::startFirstInnings() {

	cout << "                  -----------------------------------------------" << endl;
	cout << "                  |  *****   || FIRST INNINGS START! ||  *****   |" << endl;
	cout << "                  ------------------------------------------------ " << endl << endl;


	isFirstInnings = true;      //firstinings will start

	initializePlayers();

	playInnings();
}

void Game::startSecondInnings() {


	cout << "                  -----------------------------------------------" << endl;
	cout << "                  |  *****   || SECOND INNINGS START! ||  *****   |" << endl;
	cout << "                  ------------------------------------------------ " << endl << endl;

	isFirstInnings = false;    //second innnings will start.
	 


	//swappiing the pointers
	Team tempTeam = *battingTeam;
	*battingTeam = *bowlingTeam;
	*bowlingTeam = tempTeam;

	initializePlayers();

	playInnings();
}


void  Game::initializePlayers() {


	batsman = &battingTeam->players[0];   //we can now access all properties of player at index 0 by this batsman pointer.
	bowler = &bowlingTeam->players[0];     

	cout << "         " << battingTeam->name << "----->" << batsman->name << " is Batting." << endl;
	cout << "         " << bowlingTeam->name << "----->" << bowler->name << " is Bowling." << endl;


}
void Game::playInnings() {


	cout << endl << endl;
	for (int i = 0; i < maxBalls; i++) {
		             
		cout << "         PRESS ENTER TO BALL!";
		getchar();

		cout << "            BoWlInG........" << endl << endl;

		bat();

		if (!validateInningsScore()) {
			break;
		}
	}

}

void Game::bat() {


	srand(time(NULL));
	int RunsScored = rand() % 6;

	//updatng batting team & batsman score

	batsman->runsScored = batsman->runsScored + RunsScored;
	battingTeam->totalRunsScored = battingTeam->totalRunsScored + RunsScored;
	batsman->ballsPlayed = batsman->ballsPlayed + 1;


	//updating bowling team & bowler score

	bowler->ballsBowled = bowler->ballsBowled + 1;
	bowlingTeam->totalBallsBowled = bowlingTeam->totalBallsBowled + 1;
	bowler->runsGiven = bowler->runsGiven + RunsScored;

	if (RunsScored != 0) {  // 1,2,3,4,5,6
		cout << "            " << bowler->name << " to " << batsman->name << "  " << RunsScored << " Runs!" << endl << endl;

		showGameScorecard();
	}
	else { // o(out)


		cout << endl;
		cout << "            " << bowler->name << " TO " << batsman->name << " OUT!" << endl << endl;
		showGameScorecard();

		battingTeam->wicketsLost = battingTeam->wicketsLost + 1;
		bowler->wicketsTaken = bowler->wicketsTaken + 1;

		int nextPlayerIndex = battingTeam->wicketsLost;
		batsman = &battingTeam->players[nextPlayerIndex];
	}



}
bool Game::validateInningsScore() {

	if (isFirstInnings) { // f first innings .

		if (battingTeam->wicketsLost == playersPerTeam || bowlingTeam->totalBallsBowled == maxBalls) {

			cout << endl;
			cout << "\t\t       ||| FIRST INNINGS ENDS! ||| " << endl << endl;

			cout << "       --------------------------------------------------------------------------" << endl << endl;
			cout << "         " << battingTeam->name << " " << battingTeam->totalRunsScored << " - "
				<< battingTeam->wicketsLost << " (" << bowlingTeam->totalBallsBowled
				<< ")" << endl;


			cout << "         " << bowlingTeam->name << " NEEDS " << battingTeam->totalRunsScored + 1
				<< " Runs to Win The Match!.." << endl << endl;
			cout << "       ----------------------------------------------------------------------------" << endl;

			return false;
		}
	}
	else { // Else 2nd innings

		if (battingTeam->totalRunsScored > bowlingTeam->totalRunsScored) {	//Case1: If batting team score > bowling team score

			cout << endl << endl;
			cout <<"                        |-------------------------------------------------------------------------------------------| " << endl;
			cout <<"                        |         ****||||||| " << battingTeam->name << " WON THE MATCH !..." << "|||||||  ****     | " << endl;
			cout <<"                        |-------------------------------------------------------------------------------------------| " << endl;
			return false;
			//Case2: Batting team is all OUT OR Bowling team is done bowling
		}
		else if (battingTeam->wicketsLost == playersPerTeam || bowlingTeam->totalBallsBowled == maxBalls) {
			if (battingTeam->totalRunsScored < bowlingTeam->totalRunsScored) {
				cout << endl << endl;
				cout <<"                    |-------------------------------------------------------------------------------------------|" << endl;
				cout <<"                    |         ****||||||| " << bowlingTeam->name << " WON THE MATCH !...." << " |||||||  ****   | " << endl;
				cout <<"                    |-------------------------------------------------------------------------------------------|" << endl;
			}
			else {
				cout << "MATCH DRAW" << endl << endl;
			}
			return false;
		}
	}

	return true;
}
	
	




void Game::showGameScorecard() {


	cout << "-------------------------------------------------------------------------------------------------" << endl;
	cout << "\t" << battingTeam->name << " " << battingTeam->totalRunsScored << " - "
		<< battingTeam->wicketsLost << " (" << bowlingTeam->totalBallsBowled << ") |" << batsman->name
		<< " " << batsman->runsScored << " (" << batsman->ballsPlayed << ") \t" << bowler->name << " "
		<< bowler->ballsBowled << " - " << bowler->runsGiven << " - " << bowler->wicketsTaken << "\t" << endl;
	cout << "--------------------------------------------------------------------------------------------------" << endl << endl;

}


void Game::showMatchSummary() {

	cout << endl << endl;

	cout << "             \t\t ||| MATCH ENDS ||| " << endl << endl;

	cout << battingTeam->name << " " << battingTeam->totalRunsScored << "-" << battingTeam->wicketsLost << " (" << bowlingTeam->totalBallsBowled << ")" << endl;

	cout << "=====================================================" << endl;
	cout << "| PLAYER               BATTING          BOWLING  |" << endl;

	for (int j = 0; j < playersPerTeam; j++) {
		Player player = battingTeam->players[j];
		cout << "|------------------------------------------------|" << endl;
		cout << "| " << "[" << j << "] " << player.name << "  \t "
			<< player.runsScored << "(" << player.ballsPlayed << ") \t\t "
			<< player.ballsBowled << "-" << player.runsGiven << "-"
			<< player.wicketsTaken << "\t |" << endl;
	}
	cout << "======================================================" << endl << endl;

	cout << bowlingTeam->name << " " << bowlingTeam->totalRunsScored << "-" << bowlingTeam->wicketsLost << " (" << battingTeam->totalBallsBowled << ")" << endl;

	cout << "======================================================" << endl;
	cout << "| PLAYER               BATTING         BOWLING   |" << endl;

	for (int i = 0; i < playersPerTeam; i++) {
		Player player = bowlingTeam->players[i];
		cout << "|------------------------------------------------|" << endl;
		cout << "| " << "[" << i << "] " << player.name << "  \t "
			<< player.runsScored << "(" << player.ballsPlayed << ") \t\t "
			<< player.ballsBowled << "-" << player.runsGiven << "-"
			<< player.wicketsTaken << "\t |" << endl;
	}
	cout << "======================================================" << endl << endl;
}





